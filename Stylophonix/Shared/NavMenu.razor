@using Stylophonix.Data
@using Stylophonix.Interfaces
@inject NavigationManager NavManager
@inject IAnimationService AnimationService
@inject IDataService DataService

<nav class="@(AnimationService.ShouldAnimate() ? "nav-animate" : string.Empty)" @onmouseleave="ClosePopups">
    <div>
        @if (NavOptions == null)
        {
            return;
        }
        @foreach (var navOption in NavOptions)
        {
            <a @onmouseenter="@(_ => OpenPopup(navOption))" @onmousedown="@(_ => OpenPopup(navOption))" @onclick="@(_ => OpenUrl(navOption))">
                <img src="@navOption.IconUrl" alt="@navOption.Text"/>
                <span>@navOption.Text</span>
                @if (navOption.Options != null)
                {
                    <PopupMenu PopupMenuOptions=@navOption.Options @ref="@navOption.PopupMenu"/>
                }
            </a>
        }
    </div>
</nav>

@code {

    private static List<PopupMenuOption> OptionsDownload => new()
    {
        new PopupMenuOption("Downloads", true),
        new PopupMenuOption("Photo", false, Url: "https://www.stylophonix.de/downloads/stylo22.jpg"),
        new PopupMenuOption("Info", false, Url: "https://www.stylophonix.de/downloads/info-2022.pdf"),
        new PopupMenuOption("Technical Rider", false, Url: "https://www.stylophonix.de/downloads/technicalriderstylophonixduo2022-12-11.pdf"),
        new PopupMenuOption("Stageplan", false, Url: "https://www.stylophonix.de/downloads/stylophonixstageplanduo22.pdf")
    };

    private List<NavOption>? NavOptions { get; set; }

    protected override Task OnInitializedAsync()
    {
        NavOptions = new List<NavOption>
        {
            new("News", "img/icons/feed_FILL0_wght400_GRAD0_opsz48.svg", "news"),
            new("Gigs", "img/icons/image_FILL0_wght400_GRAD0_opsz48.svg", GetGigInfoForNav()),
            new("Lineup", "img/icons/group_FILL0_wght400_GRAD0_opsz48.svg", "lineup"),
            new("Downloads", "img/icons/download_FILL0_wght400_GRAD0_opsz48.svg", OptionsDownload)
        };

        return base.OnInitializedAsync();
    }

    private IEnumerable<PopupMenuOption> GetGigInfoForNav()
    {
        var header = new PopupMenuOption("Gigs", true);
        var gigs = DataService.GetGigInfoForNav();
        var options = new List<PopupMenuOption> {header};
        options.AddRange(gigs);
        return options;
    }

    private void OpenPopup(NavOption navOption)
    {
        CloseOtherPopups(navOption);

        if (navOption.PopupMenu != null)
        {
            navOption.PopupMenu.IsVisible = true;
        }
    }

    private void ClosePopups()
    {
        foreach (var navOption in NavOptions?.Where(x => x.PopupMenu != null) ?? Array.Empty<NavOption>())
        {
            navOption.PopupMenu!.IsVisible = false;
        }
    }

    private void CloseOtherPopups(NavOption option)
    {
        foreach (var navOption in NavOptions?.Where(x => x.PopupMenu != null && x != option) ?? Array.Empty<NavOption>())
        {
            navOption.PopupMenu!.IsVisible = false;
        }
    }

    private void OpenUrl(NavOption option)
    {
        if (option.DestinationUrl == null) return;

        ClosePopups();
        NavManager.NavigateTo(option.DestinationUrl);
    }

}