@page "/gigs/{gig}"
@using Stylophonix.Data

@if (Gig != null && LoadGigInfo() is { } gigInfo)
{
    <PageTitle>Stylophonix | @gigInfo.Title</PageTitle>

    <div id="gig-info">
        <span>@gigInfo.Title</span>
        @foreach (var paragraph in gigInfo.Paragraphs)
        {
            <span>@((MarkupString)paragraph)</span>
        }

    </div>

    <div id="pics">
        @foreach (var fileUrl in GetImageFileUrls())
        {
            <a href="@fileUrl">
                <img src="@fileUrl" alt="@Path.GetFileNameWithoutExtension(fileUrl)"/>
            </a>
        }
    </div>

    <div id="vids">
        @foreach (var fileUrl in GetVideoFileUrls())
        {
            <video controls>
                <source src="@fileUrl" type="video/mp4"> <!-- hardcoded mp4, change this if there's other extensions -->
                Your browser does not support the video tag.
            </video>
        }
    </div>
}
else
{
    <PageTitle>Stylophonix | Gig not found</PageTitle>

    <span>Es existiert kein Gig mit diesem Titel.</span>
}

@code {

    [Parameter] public string? Gig { get; set; }

    private GigInfo? LoadGigInfo()
    {
        if (Gig == null)
        {
            return null;
        }

        try
        {
            var wwwroot = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/data/gigs");
            var submittedDirectory = Path.Combine(wwwroot, Gig);
            var lines = File.ReadLines(Path.Combine(submittedDirectory, "info.txt")).ToArray();
            return new GigInfo(lines[0], lines.Skip(1));
        }
        catch (Exception e) when (e is DirectoryNotFoundException or FileNotFoundException)
        {
        }

        return null;
    }

    private IEnumerable<string> GetImageFileUrls()
    {
        return GetFileUrls(["jpg", "jpeg", "png", "webp", "avif"]);
    }

    private IEnumerable<string> GetVideoFileUrls()
    {
        return GetFileUrls(["mp4"]);
    }

    private IEnumerable<string> GetFileUrls(IEnumerable<string> fileExtensions)
    {
        if (Gig is null)
        {
            return [];
        }

        var wwwroot = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/img/gigs");
        var submittedDirectory = Path.Combine(wwwroot, Gig);
        var files = Directory.GetFiles(submittedDirectory);
        var filesPrepared = files.Where(x =>
                fileExtensions.Any(y => x.EndsWith($".{y}")))
            .Select(x => $"img/gigs/{Gig}/{Path.GetFileName(x)}")
            .OrderBy(x => x);
        return filesPrepared;
    }

}